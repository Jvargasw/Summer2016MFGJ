<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
message_current = 0;
timer = 0;
cutoff = 0;

message[0] = "";
numOfPeople = 0;

t = 0;
//Amplitude &amp; Freq for Wavy Text
amplitude = 3;
freq = 2;

done = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Done
if (done)
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//t var is for modifiers
t++;
//Set Font
draw_set_font(f_chat);
//Set Colour
draw_set_colour(c_white);

//Read in array length
message_end = array_length_1d(message);

//If there are messages
if (message_end &gt; 0)
{
    var modifier = 0;
    //Character Width
    var charWidth = 15;
    var charHeight = 25;
    //How many characters allowed in each line
    //if (portrait == "none") var lineEnd = 50;
    var lineEnd = 45;
    //Variables for spacing characters
    var line = 0;
    var space = 0;
    var i = 1;
    //Delay time between printing each character
    var delay = .5;

    
    //character emotion variables
    
    
    //Draw Portrait
    switch(numOfPeople)
        {
            case 1:
            {
                draw_sprite(global.emotionMari, 0, 250, 600);
                break;
            }
            case 2:
            {
                draw_sprite(global.emotionMari, 0, 0, 600);
                draw_sprite(global.emotionWisp, 0, 600, 250);
                break;
            }
            case 3:
            {   
                if(global.pal2Visible)draw_sprite(global.emotionPal2,0,500,600);
                if(global.pal1Visible)draw_sprite(global.emotionPal1,0,250,600);
                draw_sprite(global.emotionMari,0,0,600);
                break;
            }
            case 4:
            {
                draw_sprite(global.emotionMari, 0, 0, 600);
                draw_sprite(global.emotionLorelei, 0, 800, 600);
                break;   
            }    
        }
    
    draw_sprite_ext(spr_chat, -1, 0, 600,1,1,0,c_white,0.5);
    //switch(portrait)
   // {
   //     case "none":
     //   {
    //        break;
    //    }
    ///    case "diest":
    //    {
            //draw_sprite(spr_portrait, 0, 5, view_hview[0]-55);
    //        break;
     //   }
    //    case "mari":
     //   {
            //draw_sprite(spr_mari_neutral, 0, 0, 600);

      //      break;
      //  }
    //}
    
    //Text Position
    var tY = view_hview[0]-150;
   // if (portrait == "none") var tX = 5;
    var tX = 60;
    
    //Next message or end dialogue
    if (cutoff == string_length(message[message_current]))
    {
        //draw cursor
        timer++;
        if (timer &gt; 30) timer = 0;
        
        //Check player input
        if (keyboard_check_pressed(ord('S')) || gamepad_button_check_pressed(0, gp_face1))
        {
            if (message_current &lt; message_end-1)
            {
                message_current++;
                cutoff = 0;
            }
            else 
            {
                timer = 0;
                done = true;
            }
        }
    }
    
    //Typewriter
    if (cutoff &lt; string_length(message[message_current]))
    {
        if (timer &gt;= delay)
        {
            cutoff++;
            timer = 0;
        }
        else timer++;
    }
    
    //Expression Change
    if(string_pos("M:",message[message_current])){

        if(string_pos("Neutral",message[message_current])){
            global.emotionMari = spr_mari_neutral;
            message_current++;
        }
        if(string_pos("Neutral Sweat",message[message_current])){
            global.emotionMari = spr_mari_neutral_sweat;
            message_current++;
        }
        if(string_pos("Happy",message[message_current])){
            global.emotionMari = spr_mari_happy;
            message_current++;
        }
        if(string_pos("Happy Sweat",message[message_current])){
            global.emotionMari = spr_mari_happy_sweat;
            message_current++;
        }
        if(string_pos("Sad",message[message_current])){
            global.emotionMari = spr_mari_sad;
            message_current++;
        }
        if(string_pos("Cry",message[message_current])){
            global.emotionMari = spr_mari_cry;
            message_current++;
        }
        if(string_pos("Sad Sweat",message[message_current])){
            global.emotionMari = spr_mari_sad_sweat;
            message_current++;
        }
        if(string_pos("Surprise",message[message_current])){
            global.emotionMari = spr_mari_surprise;
            message_current++;
        }
        if(string_pos("Smile",message[message_current])){
            global.emotionMari = spr_mari_smile;
            message_current++;
        }
        if(string_pos("Smile Sweat",message[message_current])){
            global.emotionMari = spr_mari_smile_sweat;
            message_current++;
        }
        if(string_pos("Surprise Sweat",message[message_current])){
            global.emotionMari = spr_mari_surprise_sweat;
            message_current++;
        }
        if(string_pos("Thinking",message[message_current])){
            global.emotionMari = spr_mari_thinking;
            message_current++;
        }
        if(string_pos("Thinking Sweat",message[message_current])){
            global.emotionMari = spr_mari_thinking_sweat;
            message_current++;
        }
        if(string_pos("Invisible",message[message_current])){
            global.mariVisible = false;
            message_current++;
        }
        if(string_pos("Visible",message[message_current])){
            global.mariVisible = true;
            message_current++;
        }      
        
    }
    
    else if(string_pos("B:",message[message_current])){

        if(string_pos("Confident",message[message_current])){
            global.emotionPal1 = spr_pal1_confident;
            message_current++;
        }
        if(string_pos("Neutral",message[message_current])){
            global.emotionPal1 = spr_pal1_neutral;
            message_current++;
        }
        if(string_pos("Terrified",message[message_current])){
            global.emotionPal1 = spr_pal1_terrified;
            message_current++;
        }
        if(string_pos("Uneasy",message[message_current])){
            global.emotionPal1 = spr_pal1_uneasy;
            message_current++;
        }
        if(string_pos("Invisible",message[message_current])){
            global.pal1Visible = false;
            message_current++;
        } 
    }
    
    else if(string_pos("A:",message[message_current])){

        if(string_pos("Confident",message[message_current])){
            global.emotionPal2 = spr_pal2_confident;
            message_current++;
        }
        if(string_pos("Neutral",message[message_current])){
            global.emotionPal2 = spr_pal2_neutral;
            message_current++;
        }
        if(string_pos("Terrified",message[message_current])){
            global.emotionPal2 = spr_pal2_terrified;
            message_current++;
        }
        if(string_pos("Uneasy",message[message_current])){
            global.emotionPal2 = spr_pal2_uneasy;
            message_current++;
        } 
        if(string_pos("Invisible",message[message_current])){
            global.pal2Visible = false;
            message_current++;
        }  
    }
    
    //Text
    while(i &lt;= string_length(message[message_current]) &amp;&amp; i &lt;= cutoff)
    {   

        
        //Check for an expression change
        
        //check for modifier
        if (string_char_at(message[message_current], i) == "\")
        {
            modifier = real(string_char_at(message[message_current], ++i));
            ++i;
        }
        
        //Go to next line
        var length = 0;
        while (string_char_at(message[message_current], i) != " " &amp;&amp; i &lt;= string_length(message[message_current]))
        {
            i++;
            length++;
        }
        
        if (space+length &gt; lineEnd)
        {
            space = 0;
            line++;
        }
        i -= length;
        
        //Draw Text
        switch(modifier)
        {
            case 0: //normal
            {
                draw_set_colour(c_white);
                draw_text(tX+(space*charWidth), tY+(charHeight*line), string_char_at(message[message_current], i));
                break;
            }
            case 1: //shaky
            {
                draw_set_colour(c_white);
                draw_text(tX+(space*charWidth)+random_range(-1, 1), tY+(charHeight*line)+random_range(-1, 1), string_char_at(message[message_current], i));
                break;
            }
            case 2: //color
            {
                draw_set_colour(c_lime);
                draw_text(tX+(space*charWidth), tY+(charHeight*line), string_char_at(message[message_current], i));
                break;
            }
            case 3: //color and shake
            {
                draw_set_colour(c_lime);
                draw_text(tX+(space*charWidth)+random_range(-1, 1), tY+(charHeight*line)+random_range(-1, 1), string_char_at(message[message_current], i));
                break;
            }
            case 4: //Sine movement
            {
                var so = t + i;
                var shift = sin(so*pi*freq/room_speed)*amplitude;
                draw_set_colour(c_white);
                draw_text(tX+(space*charWidth), tY+(charHeight*line)+shift, string_char_at(message[message_current], i));
                break;
            }
            case 5: //Gradient Text
            {
                draw_set_colour(make_colour_hsv(t+i, 255, 255));
                draw_text(tX+(space*charWidth), tY+(charHeight*line), string_char_at(message[message_current], i));
                break;
            }
            case 6: //Gradient &amp; Sine
            {
                draw_set_colour(make_colour_hsv(t+i, 255, 255));
                var so = t + i;
                var shift = sin(so*pi*freq/room_speed)*amplitude;
                draw_text(tX+(space*charWidth), tY+(charHeight*line)+shift, string_char_at(message[message_current], i));
                break;
            }
        }
        
        space++;
        i++;
    }
    
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
